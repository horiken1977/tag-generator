name: 🚀 Auto Deploy to Sakura Internet (Optimized)

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  workflow_dispatch:
    inputs:
      full_deploy:
        description: 'フルデプロイ（依存関係も更新）'
        required: false
        default: 'no'
        type: choice
        options:
          - yes
          - no

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v3
    
    - name: 🔧 Install deployment tools
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y sshpass rsync
    
    - name: 🚀 Deploy to Sakura Internet
      env:
        REMOTE_HOST: mokumoku.sakura.ne.jp
        REMOTE_USER: mokumoku
        REMOTE_PASSWORD: ${{ secrets.SAKURA_PASSWORD }}
        REMOTE_PATH: /home/mokumoku/www/tags
      run: |
        echo "🔍 SSH接続をテスト中..."
        sshpass -p "$REMOTE_PASSWORD" ssh -o StrictHostKeyChecking=no -p 22 "$REMOTE_USER@$REMOTE_HOST" "echo '✅ SSH接続成功'"
        
        echo "📁 リモートディレクトリを準備中..."
        sshpass -p "$REMOTE_PASSWORD" ssh -p 22 "$REMOTE_USER@$REMOTE_HOST" "
          mkdir -p $REMOTE_PATH/logs
        "
        
        # APIサーバーが動いていれば停止
        echo "🛑 既存APIサーバーを停止中..."
        sshpass -p "$REMOTE_PASSWORD" ssh -p 22 "$REMOTE_USER@$REMOTE_HOST" "
          cd $REMOTE_PATH
          if [ -f 'api_server.pid' ]; then
            PID=\$(cat api_server.pid)
            if ps -p \$PID > /dev/null 2>&1; then
              kill \$PID || true
              sleep 2
            fi
          fi
          # 古いプロセスも停止
          pkill -f 'api_server' || true
        "
        
        echo "📦 変更されたファイルのみを同期中..."
        # rsyncの前に必須ファイルの存在確認
        if [ ! -f "index.html" ] && [ -f "index_final.html" ]; then
          cp index_final.html index.html
          echo "📝 index.htmlを作成しました"
        fi
        
        sshpass -p "$REMOTE_PASSWORD" rsync -avz \
          --exclude=.git \
          --exclude=.env \
          --exclude=.env.template \
          --exclude=__pycache__ \
          --exclude=*.pyc \
          --exclude=venv \
          --exclude=.DS_Store \
          --exclude=logs \
          --exclude=.github \
          --exclude='*.bak' \
          --exclude=backups \
          --exclude=service.pid \
          --exclude=api_server.pid \
          -e "ssh -p 22 -o StrictHostKeyChecking=no" \
          ./ "$REMOTE_USER@$REMOTE_HOST:$REMOTE_PATH/"
        
        # requirements.txtが変更された場合、または明示的に指定された場合のみ依存関係をインストール
        if [ "${{ github.event.inputs.full_deploy }}" = "yes" ] || git diff --name-only HEAD^ HEAD | grep -q "requirements.txt"; then
          echo "📚 依存関係をインストール中..."
          sshpass -p "$REMOTE_PASSWORD" ssh -p 22 "$REMOTE_USER@$REMOTE_HOST" "
            cd $REMOTE_PATH
            
            # 仮想環境の確認
            if [ ! -d 'venv' ]; then
              python3 -m venv venv
              echo '✅ 仮想環境を作成しました'
            fi
            
            # 依存関係インストール
            . venv/bin/activate
            python3 -m pip install --upgrade pip
            
            # 基本パッケージのみインストール（高速化）
            pip install python-dotenv requests
            echo '✅ 基本パッケージをインストールしました'
          "
        else
          echo "ℹ️ 依存関係のインストールをスキップ（変更なし）"
        fi
        
        echo "⚙️ 実行権限を設定中..."
        sshpass -p "$REMOTE_PASSWORD" ssh -p 22 "$REMOTE_USER@$REMOTE_HOST" "
          cd $REMOTE_PATH
          chmod +x *.sh 2>/dev/null || true
          chmod +x *.py 2>/dev/null || true
        "
        
        echo "🌐 ファイル更新を実行中..."
        sshpass -p "$REMOTE_PASSWORD" ssh -p 22 "$REMOTE_USER@$REMOTE_HOST" "
          cd $REMOTE_PATH
          
          # 重要ファイルの存在確認と権限設定
          if [ ! -f 'index.html' ]; then
            echo '⚠️ index.htmlが存在しません。作成します...'
            if [ -f 'index_final.html' ]; then
              cp index_final.html index.html
            else
              echo 'エラー: index.htmlもindex_final.htmlも存在しません'
              exit 1
            fi
          fi
          
          # ファイル権限の修正（Forbidden対策）
          chmod 644 *.html *.css *.js 2>/dev/null || true
          chmod 755 *.php 2>/dev/null || true
          chmod 755 . 2>/dev/null || true
          
          echo '✅ ファイル権限を設定しました'
          
          # 親ディレクトリのパーミッション確認（重要）
          cd /home/mokumoku/www
          chmod 755 tags
          cd $REMOTE_PATH
          
          # .htaccessファイルのクリーンアップ（Nginxでは不要）
          if [ -f '/home/mokumoku/www/.htaccess' ]; then
            rm -f /home/mokumoku/www/.htaccess
            echo '🧹 不要な.htaccessを削除しました'
          fi
          
          # APIサーバーの起動
          if [ -f 'api_server_v2.py' ]; then
            echo '🚀 API Server v2を起動中...'
            nohup python3 api_server_v2.py > logs/api_server.log 2>&1 &
            echo \$! > api_server.pid
            sleep 3
            
            # ヘルスチェック
            if curl -s http://localhost:8080/api/status > /dev/null; then
              echo '✅ API Server v2が正常に起動しました'
            else
              echo '⚠️ API Serverの起動に失敗した可能性があります'
            fi
          elif [ -f 'api_server.py' ]; then
            echo '🚀 API Serverを起動中...'
            nohup python3 api_server.py > logs/api_server.log 2>&1 &
            echo \$! > api_server.pid
          fi
        "
        
        echo ""
        echo "🎉 デプロイ完了!"
        echo "=================================="
        echo "🌐 メインURL: https://mokumoku.sakura.ne.jp/tags/"
        echo "📱 デモ版: https://mokumoku.sakura.ne.jp/tags/webapp.html"
        echo "🔗 API版: https://mokumoku.sakura.ne.jp/tags/webapp_api.html"
        echo ""
        echo "デプロイ時間: $(date +'%Y-%m-%d %H:%M:%S')"
    
    - name: 📊 Deployment Summary
      if: always()
      run: |
        echo "## 📊 デプロイメントサマリー"
        echo "- **ブランチ**: ${{ github.ref_name }}"
        echo "- **コミット**: ${{ github.sha }}"
        echo "- **実行者**: ${{ github.actor }}"
        echo "- **時刻**: $(date +'%Y-%m-%d %H:%M:%S')"
        echo "- **フルデプロイ**: ${{ github.event.inputs.full_deploy || 'no' }}"